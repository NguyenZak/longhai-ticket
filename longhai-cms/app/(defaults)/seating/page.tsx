'use client';
import React, { useState, useEffect } from 'react';
import SeatingEditor from '@/components/seating/SeatingEditor';
import { apiCall } from '@/lib/api';

interface Event {
  id: string;
  title: string;
  start_date: string;
  venue: string;
  description?: string;
  status?: string;
}

interface TicketType {
  id: string;
  name: string;
  price: number;
  color: string;
}

const SeatingPage: React.FC = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [selectedEvent, setSelectedEvent] = useState<string>('');
  const [ticketTypes, setTicketTypes] = useState<TicketType[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingEvents, setIsLoadingEvents] = useState(true);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);

  useEffect(() => {
    fetchEvents();
    fetchTicketTypes();
  }, []);

  const fetchEvents = async () => {
    setIsLoadingEvents(true);
    try {
      const data = await apiCall('/events');
      setEvents(data.data || []);
    } catch (error) {
      console.error('Error fetching events:', error);
      setMessage({ type: 'error', text: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·ª± ki·ªán' });
    } finally {
      setIsLoadingEvents(false);
    }
  };

  const fetchTicketTypes = async () => {
    try {
      const data = await apiCall('/tickets/types');
      setTicketTypes(data.types || []);
    } catch (error) {
      console.error('Error fetching ticket types:', error);
    }
  };

  const handleEventSelect = (eventId: string) => {
    setSelectedEvent(eventId);
    setMessage(null);
  };

  const handleSave = (seats: any[]) => {
    setMessage({ type: 'success', text: `ƒê√£ l∆∞u ${seats.length} gh·∫ø cho s·ª± ki·ªán` });
  };

  const handleCancel = () => {
    setSelectedEvent('');
    setMessage(null);
  };

  return (
    <div className="seating-page bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-6">
        <div className="mx-auto">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                üé≠ Qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø
              </h1>
              <p className="text-gray-600 text-lg">
                T·∫°o v√† qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø cho c√°c s·ª± ki·ªán
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <div className="text-sm text-gray-500">T·ªïng s·ª± ki·ªán</div>
                <div className="text-2xl font-bold text-blue-600">{events.length}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="mx-auto px-6 py-8">
        {/* Message */}
        {message && (
          <div className={`mb-8 p-4 rounded-xl shadow-sm ${
            message.type === 'success' 
              ? 'bg-green-50 border border-green-200 text-green-800' 
              : 'bg-red-50 border border-red-200 text-red-800'
          }`}>
            <div className="flex items-center">
              <span className="text-xl mr-3">
                {message.type === 'success' ? '‚úÖ' : '‚ùå'}
              </span>
              {message.text}
            </div>
          </div>
        )}

        {/* Event Selection */}
        {!selectedEvent ? (
          <div className="space-y-8">
            {/* Welcome Section */}
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-white">
              <div className="max-w-3xl">
                <h2 className="text-3xl font-bold mb-4">
                  Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø
                </h2>
                <p className="text-xl mb-6 opacity-90">
                  T·∫°o v√† qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø chuy√™n nghi·ªáp cho c√°c s·ª± ki·ªán c·ªßa b·∫°n
                </p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="text-center">
                    <div className="text-4xl mb-2">üé®</div>
                    <h3 className="font-semibold mb-1">V·∫Ω gh·∫ø d·ªÖ d√†ng</h3>
                    <p className="text-sm opacity-80">Giao di·ªán tr·ª±c quan v·ªõi canvas</p>
                  </div>
                  <div className="text-center">
                    <div className="text-4xl mb-2">üé´</div>
                    <h3 className="font-semibold mb-1">Qu·∫£n l√Ω lo·∫°i v√©</h3>
                    <p className="text-sm opacity-80">G√°n gh·∫ø v·ªõi lo·∫°i v√© c·ª• th·ªÉ</p>
                  </div>
                  <div className="text-center">
                    <div className="text-4xl mb-2">üìä</div>
                    <h3 className="font-semibold mb-1">Th·ªëng k√™ chi ti·∫øt</h3>
                    <p className="text-sm opacity-80">Theo d√µi tr·∫°ng th√°i gh·∫ø</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Event Selection */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">
                  üéØ Ch·ªçn s·ª± ki·ªán ƒë·ªÉ qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø
                </h2>
                <div className="text-sm text-gray-500">
                  {events.length} s·ª± ki·ªán c√≥ s·∫µn
                </div>
              </div>
              
              {isLoadingEvents ? (
                <div className="text-center py-12">
                  <div className="text-6xl mb-6">‚öôÔ∏è</div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    ƒêang t·∫£i s·ª± ki·ªán...
                  </h3>
                  <p className="text-gray-600 mb-6 max-w-md mx-auto">
                    Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.
                  </p>
                </div>
              ) : events.length === 0 ? (
                <div className="text-center py-12">
                  <div className="text-6xl mb-6">üìÖ</div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    Ch∆∞a c√≥ s·ª± ki·ªán n√†o
                  </h3>
                  <p className="text-gray-600 mb-6 max-w-md mx-auto">
                    Vui l√≤ng t·∫°o s·ª± ki·ªán tr∆∞·ªõc khi qu·∫£n l√Ω s∆° ƒë·ªì gh·∫ø
                  </p>
                  <button
                    onClick={() => window.location.href = '/events'}
                    className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors"
                  >
                    ‚ûï T·∫°o s·ª± ki·ªán m·ªõi
                  </button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {events.map((event) => (
                    <button
                      key={event.id}
                      onClick={() => handleEventSelect(event.id)}
                      className="group p-6 bg-gray-50 border border-gray-200 rounded-xl hover:border-blue-300 hover:bg-blue-50 transition-all text-left"
                    >
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                          <span className="text-2xl">üé™</span>
                        </div>
                        <span className="text-blue-500 group-hover:text-blue-600 transition-colors">
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </span>
                      </div>
                      <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-blue-900 transition-colors">
                        {event.title}
                      </h3>
                      <div className="space-y-1 text-sm text-gray-600">
                        <div className="flex items-center">
                          <span className="mr-2">üìÖ</span>
                          {new Date(event.start_date).toLocaleDateString('vi-VN')}
                        </div>
                        <div className="flex items-center">
                          <span className="mr-2">üìç</span>
                          {event.venue}
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              )}
            </div>

            {/* Features Overview */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">
                ‚ú® T√≠nh nƒÉng m·ªõi
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div className="text-center group">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform">
                    <span className="text-3xl">üé®</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">V·∫Ω h√†ng gh·∫ø</h4>
                  <p className="text-gray-600 text-sm">
                    V·∫Ω nhanh h√†ng gh·∫ø v·ªõi m·ªôt click, h·ªó tr·ª£ v·∫Ω gh·∫ø ƒë∆°n l·∫ª ho·∫∑c c·∫£ h√†ng
                  </p>
                </div>
                <div className="text-center group">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform">
                    <span className="text-3xl">üé´</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">G√°n lo·∫°i v√©</h4>
                  <p className="text-gray-600 text-sm">
                    G√°n gh·∫ø v·ªõi lo·∫°i v√© v√† gi√° c·ª• th·ªÉ, t·ª± ƒë·ªông c·∫≠p nh·∫≠t m√†u s·∫Øc
                  </p>
                </div>
                <div className="text-center group">
                  <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform">
                    <span className="text-3xl">‚úèÔ∏è</span>
                  </div>
                  <h4 className="font-semibold text-gray-900 mb-2">S·ª≠a t√™n gh·∫ø</h4>
                  <p className="text-gray-600 text-sm">
                    T√πy ch·ªânh t√™n gh·∫ø v√† t√™n h√†ng theo √Ω mu·ªën, h·ªó tr·ª£ ti·∫øng Vi·ªát
                  </p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          /* Seating Editor */
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
            <div className="border-b border-gray-200 px-8 py-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900">
                    üé® Ch·ªânh s·ª≠a s∆° ƒë·ªì gh·∫ø
                  </h2>
                  <p className="text-gray-600 mt-1">
                    S·ª± ki·ªán: {events.find(e => e.id === selectedEvent)?.name}
                  </p>
                </div>
                <button
                  onClick={handleCancel}
                  className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors font-medium"
                >
                  ‚Üê Quay l·∫°i
                </button>
              </div>
            </div>
            
            <SeatingEditor
              eventId={selectedEvent}
              onSave={handleSave}
              onCancel={handleCancel}
              ticketTypes={ticketTypes}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default SeatingPage; 